/* SIE CONFIDENTIAL
 * PlayStation(R)4 Programmer Tool Runtime Library Release 04.508.001
 * Copyright (C) 2012 Sony Interactive Entertainment Inc. 
 * All Rights Reserved.
 */

#include "shader_base.h"

/* data passed from vertex shader to pixel shader */
struct vertexOutput {
    float4 HPosition	: S_POSITION;
    float2 texcoord	: TEXCOORD0;

	//float3 TmpColor     : TEXCOORD4;
    float3 LightVec	    : TEXCOORD5;
    float3 WorldNormal	: TEXCOORD6;
    float3 WorldView	: TEXCOORD7;
};
 
///////// Vertex SHADING /////////////////////

/*********** Generic Vertex Shader ******/

unistruct SkinBuffer : register(b1)
{
   row_major matrix skinMatrices[64];
};


vertexOutput main(    float3 aPosition	: POSITION,
                      float3 aNormal	: NORMAL,

                      float2 aTexcoord	: TEXCOORD0,

	                  int4 aBlendIndices : TEXCOORD4,

		              int4 aBlendIndices4 : TEXCOORD5,

	                  float4 aBlendWeights : TEXCOORD6,
					   
		              float4 aBlendWeights4 : TEXCOORD7,


	                uniform row_major matrix WorldInverseTranspose,
                    uniform row_major matrix WorldViewProjection,
                    uniform row_major matrix World, 
                    uniform row_major matrix ViewInverse,
					  uniform float3   light0Position,
	                uniform row_major matrix bindShapeMatrix
                    ) 
{

  row_major matrix blend4
    = skinMatrices[(int)aBlendIndices.x] * aBlendWeights.x
    + skinMatrices[(int)aBlendIndices.y] * aBlendWeights.y
    + skinMatrices[(int)aBlendIndices.z] * aBlendWeights.z
    + skinMatrices[(int)aBlendIndices.w] * aBlendWeights.w;


  row_major matrix blend3 
    = skinMatrices[(int)aBlendIndices4.x] * aBlendWeights4.x
    + skinMatrices[(int)aBlendIndices4.y] * aBlendWeights4.y
    + skinMatrices[(int)aBlendIndices4.z] * aBlendWeights4.z
    + skinMatrices[(int)aBlendIndices4.w] * aBlendWeights4.w;

	row_major matrix   blend = blend4 + blend3;
  row_major matrix blend2      =  mul(bindShapeMatrix, blend);

	// apply skinning
	float4 blendPosition = mul(blend2, float4(aPosition, 1.f));
  float4 blendNormal   = mul(blend2, float4(aNormal, 0.f));
  //float4 blendNormal = float4(aBlendWeights.xyz, 0.f);
  //float4 blendPosition = float4(aPosition, 1.f);
 // float4 blendNormal   = float4(aNormal, 0.f);

    vertexOutput OUT;
    float4 LocalPosition = float4(blendPosition.xyz,1);

	OUT.WorldNormal      = mul(WorldInverseTranspose, blendNormal).xyz;

    float3 WorldPosition = mul(World, LocalPosition).xyz;
    OUT.LightVec         = (light0Position - WorldPosition);

	OUT.texcoord.x = aTexcoord.x;
	OUT.texcoord.y = 1.0 - aTexcoord.y;

	//OUT.WorldView        = normalize( ViewInverse[3].xyz - WorldPosition);	
	OUT.WorldView		 = normalize( float3(ViewInverse[0].w, ViewInverse[1].w, ViewInverse[2].w) - WorldPosition);
    OUT.HPosition        = mul(WorldViewProjection, LocalPosition);

	//OUT.TmpColor = aBlendWeights.xyz;
    return OUT;
}


