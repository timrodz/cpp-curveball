/* SIE CONFIDENTIAL
* PlayStation(R)4 Programmer Tool Runtime Library Release 04.508.001
* Copyright (C) 2012 Sony Interactive Entertainment Inc. 
* All Rights Reserved.
*/

#ifndef _SCE_SAMPLE_UTIL_AUDIO_CONTEXT_H
#define _SCE_SAMPLE_UTIL_AUDIO_CONTEXT_H

#include <sampleutil/sampleutil_common.h>
#include <sampleutil/system.h>

namespace sce
{
	namespace SampleUtil
	{
		/*!
		 * @~English
		 * @brief Audio-associated definitions 
		 * @details These are the audio-associated definitions. 
		 * @~Japanese
		 * @brief Audio関連の定義 
		 * @details Audio関連の定義です。 
		 */
		namespace Audio
		{
			class Voice;
			class Buss;
			/*!
			 * @~English
			 * @brief Function called upon audio data update 
			 * @param mainBuffer This is the data sent to the main port of the audio driver. SCE_AUDIO_OUT_PARAM_FORMAT_S16_STEREO format
			 * @param mainBufferSize mainBuffer size (bytes)
			 * @param bgmBuffer This is the data sent to the BGM port of the audio driver. SCE_AUDIO_OUT_PARAM_FORMAT_S16_STEREO format
			 * @param bgmBufferSize bgmBuffer size (bytes)
			 * @param userArg Value specified upon AudioContext initialization
			 * 
			 * @details This function is called immediately before the data generated by AudioContext is sent to the audio driver. 
			 * @~Japanese
			 * @brief オーディオデータのアップデート時に呼ばれる関数 
			 * @param mainBuffer オーディオドライバのメインポートに送られるデータ。SCE_AUDIO_OUT_PARAM_FORMAT_S16_STEREOフォーマット
			 * @param mainBufferSize mainBufferのサイズ(byte)
			 * @param bgmBuffer オーディオドライバのBGMポートに送られるデータ。SCE_AUDIO_OUT_PARAM_FORMAT_S16_STEREOフォーマット
			 * @param bgmBufferSize bgmBufferのサイズ(byte)
			 * @param userArg AudioContextの初期化時に指定した値
			 * 
			 * @details この関数はAudioContextが生成したデータをオーディオドライバに送信する直前に呼ばれます。 
			 */
			typedef void (*AudioContextUpdate)( void* mainBuffer, uint32_t mainBufferSize, 
						   void* bgmBuffer, uint32_t bgmBufferSize,  void *userArg );

			/*!
			 * @~English
			 * @brief AudioContext option 
			 * @details This is the AudioContext option. 
			 * @~Japanese
			 * @brief AudioContextのオプション 
			 * @details AudioContextのオプションです。 
			 */
			struct AudioContextOption
			{
				/*!
				 * @~English
				 * @brief Function called immediately before AudioContext sends data to the driver 
				 * @~Japanese
				 * @brief AudioContextがドライバにデータを送信する直前に呼ばれる関数 
				 */
				AudioContextUpdate contextUpdate;
				/*!
				 * @~English
				 * @brief User-specified argument of contextUpdate 
				 * @~Japanese
				 * @brief contextUpdateのユーザー指定引数 
				 */
				void *userArg;

				/*!
				 * @~English
				 * @brief Stereo voice maximum value (Default value: 8) 
				 * @~Japanese
				 * @brief ステレオボイスの最大数(デフォルト値8) 
				 */
				uint32_t	stereoVoiceNum;
				/*!
				 * @~English
				 * @brief Monaural voice maximum value (Default value: 32) 
				 * @~Japanese
				 * @brief モノラルボイスの最大数(デフォルト値32) 
				 */
				uint32_t	monoVoiceNum;
				/*!
				 * @~English
				 * @brief Maximum value for voice using ATRAC9(TM) (Default value: 4) 
				 * @~Japanese
				 * @brief ATRAC9(TM)を使うボイスの最大数(デフォルト値4) 
				 */
				uint32_t	at9VoiceNum;

				/*!
				 * @~English
				 * @brief Reverb buss maximum value (Default value: 4) 
				 * @~Japanese
				 * @brief リバーブバスの最大数(デフォルト値4) 
				 */
				uint32_t	reverbBussNum;
				/*!
				 * @~English
				 * @brief Mixer buss maximum value (Default value: 4) 
				 * @~Japanese
				 * @brief ミキサーバスの最大数(デフォルト値4) 
				 */
				uint32_t	mixerBussNum;


				AudioContextOption(void)
				{
					contextUpdate = NULL;
					userArg = NULL;

					monoVoiceNum   = 32;
					stereoVoiceNum =  8;
					at9VoiceNum    =  4;

					reverbBussNum  =  4;
					mixerBussNum   =  4;
				}
			};


			class Voice;

			/*!
			 * @~English
			 * @brief Buss class 
			 * @details This is the buss class. This is used for audio routing. 
			 * @~Japanese
			 * @brief バスクラス 
			 * @details バスクラスです。オーディオのルーティングに使用します。 
			 */
			class SCE_SAMPLE_UTIL_API Buss : public sce::SampleUtil::Resource
			{
			public:
				virtual ~Buss(void){}
				

				/*!
				 * @~English
				 * @brief Output destination setting 
				 * @details This sets the output destination for audio data. By default the index 0 is connected to the main buss. If the buss is specified as NULL, there will be no output anywhere. 
				 * @param nSourceOutputIndex Output index. 0 or higher and lower than 4.
				 * @param buss This is the buss of the output destination. If specified as NULL, there will be no output anywhere.
				 * 
				 * @retval SCE_OK Success
				 * @retval (<0) Error code
				 * @~Japanese
				 * @brief 出力先の設定 
				 * @details オーディオデータの出力先を設定します。初期設定では indexの0はメインバスに接続されています。bussにNULLを指定するとどこにも出力されません。 
				 * @param nSourceOutputIndex 出力インデックス。0以上、4未満。
				 * @param buss 出力先のバス。NULLを指定するとどこにも出力されない。
				 * 
				 * @retval SCE_OK 成功
				 * @retval (<0) エラーコード
				 */
				virtual int setOutput(uint32_t nSourceOutputIndex, Buss *buss) = 0;


			};

			/*!
			 * @~English
			 * @brief Context class for playing a sound 
			 * @details This is the class to handle resources for playing sound. AudioContext is specified by initialization of Voice and ReverbBuss after executing initialize for itself. It is possible to use one AudioContext instance for multiple Voices and ReverbBusses. 
			 * @~Japanese
			 * @brief サウンド再生用のコンテキストクラス 
			 * @details サウンド再生を行うための、リソースを扱うクラスです。AudioContextは自身のinitializeを行った後に、Voice, ReverbBussの初期化で指定します。１つのAudioContextインスタンスを、複数のVoice, ReverbBussに用いることができます。 
			 */
			class SCE_SAMPLE_UTIL_API AudioContext : public Resource
			{
            public:
				virtual ~AudioContext(void){}

				 /*!
				  * @~English
				  * @brief Creates a reverb buss. 
				  * @param outBuss Pointer to which the generated buss returns
				  * @param reverbMode Reverberation mode
				  * 
				  * @retval SCE_OK Success
				  * @retval SCE_SAMPLE_UTIL_ERROR_INVALID_PARAM Parameter invalid
				  * @retval SCE_SAMPLE_UTIL_ERROR_BUSY No usable reverb voice exists
				  * @retval <SCE_OK Failure
				  * @details This creates a reverb buss. 
				  * @~Japanese
				  * @brief リバーブバスの作成 
				  * @param outBuss 生成されたバスが返されるポインタ
				  * @param reverbMode リバーブモード
				  * 
				  * @retval SCE_OK 成功
				  * @retval SCE_SAMPLE_UTIL_ERROR_INVALID_PARAM パラメータ不正
				  * @retval SCE_SAMPLE_UTIL_ERROR_BUSY 利用可能なリバーブボイスが無い
				  * @retval <SCE_OK 失敗
				  * @details リバーブバスを作成します。 
				  */
				virtual int createReverbBuss(Buss **outBuss, const int reverbMode) = 0;


				/*!
				 * @~English
				 * @brief Create a voice 
				 * @details This generates a voice with the voice data as the source. To delete the generated instance, use sce::SampleUtil::destroy(). 
				 * @param outVoice Pointer to which the generated voice returns
				 * @param voiceData Voice data
				 * @retval SCE_OK Success
				 * @retval (<0) Error code
				 * @~Japanese
				 * @brief ボイスの生成 
				 * @details ボイスデータを元にボイスを生成します。生成されたインスタンスを削除する場合はsce::SampleUtil::destroy()を使用してください。 
				 * @param outVoice 生成されたボイスが返るポインタ
				 * @param voiceData ボイスデータ
				 * @retval SCE_OK 成功
				 * @retval (<0) エラーコード
				 */
				virtual int createVoice(Voice** outVoice, const VoiceData *voiceData ) = 0;

#if _SCE_TARGET_OS_ORBIS
				/*!
				 * @~English
				 * @brief Create a voice 
				 * @details Creates an empty voice. Use sce::SampleUtil::destroy() to delete the created voice.  After creating this voice, waveform data can be added to it using the Voice::addData method. 
				 * @param outVoice Pointer to which the generated voice returns
				 * @param bufferSize Size of the internal buffer for storing waveform data. Specify a sufficient size for playing sound continuously without pause.
				 * @param waveformType Waveform type. Specify one of the SCE_NGS2_WAVEFORM_TYPE_... values.
				 * @param numChannels Number of channels
				 * @param sampleRate Sample rate
				 * @retval SCE_OK Success
				 * @retval (<0) Error code
				 * @~Japanese
				 * @brief ボイスの生成 
				 * @details 空のボイスを生成します。生成されたボイスを削除するには sce::SampleUtil::destroy()を使用してください。 このボイスを生成後、Voice::addDataメソッドを使ってボイスに波形データを追加できます。 
				 * @param outVoice 生成されたボイスが返るポインタ
				 * @param bufferSize 波形データを保存する内部バッファのサイズ。音を途切れずに再生するのに十分なサイズを指定してください。
				 * @param waveformType 波形タイプ。SCE_NGS2_WAVEFORM_TYPE_...のいずれかの値を指定してください。
				 * @param numChannels チャンネル数
				 * @param sampleRate サンプル周波数
				 * @retval SCE_OK 成功
				 * @retval (<0) エラーコード
				 */
				virtual int createRawVoice(Voice** outVoice, uint32_t bufferSize, uint32_t waveformType, uint32_t numChannels, uint32_t sampleRate) = 0;
#endif

				/*!
				 * @~English
				 * @brief Return the main buss 
				 * @details This returns the buss connected to the main port of the audio driver. 
				 * @return Main buss 
				 * @~Japanese
				 * @brief メインバスを返す 
				 * @details オーディオドライバのメインポートに接続されたバスを返します。 
				 * @return メインバス 
				 */
				virtual Buss *getMainBuss(void) = 0;
				/*!
				 * @~English
				 * @brief Return the BGM buss 
				 * @details This returns the buss connected to the BGM port of the audio driver. 
				 * @return BGM buss 
				 * @~Japanese
				 * @brief BGMバスを返す 
				 * @details オーディオドライバのBGMポートに接続されたバスを返します。 
				 * @return BGMバス 
				 */
				virtual Buss *getBgmBuss(void)  = 0;

#if _SCE_TARGET_OS_ORBIS
				/*!
				 * @~English
				 * @brief Generate buss connected to controller's speaker 
				 * @details This generates busses output from the controller's speakers of each user. 
				 * @param outBuss Pointer to which the generated buss returns
				 * @param userId User ID of the controller's speaker for output
				 * @retval SCE_OK Success
				 * @retval (<0) Error code
				 * @~Japanese
				 * @brief コントローラーのスピーカーに接続されたバスの生成 
				 * @details 各ユーザーのコントローラーのスピーカーから出力されるバスを生成します。 
				 * @param outBuss 生成されたバスが返るポインタ
				 * @param userId 出力するコントローラーのスピーカーのユーザのユーザーID
				 * @retval SCE_OK 成功
				 * @retval (<0) エラーコード
				 */
                virtual int createPadSpeakerBuss(Buss **outBuss, sce::SampleUtil::System::UserId  userId) = 0;
#endif /* _SCE_TARGET_OS_ORBIS */

			};

			/*!
			 * @~English
			 * @brief AudioContext generation 
			 * @param outAudioContext Pointer to which the generated AudioContext returns
			 * @param option Pointer to AudioContextOption (Omissible)
			 * 
			 * @retval SCE_OK Success
			 * @retval SCE_SAMPLE_UTIL_ERROR_INVALID_PARAM Parameter invalid
			 * @retval SCE_SAMPLE_UTIL_ERROR_FATAL Initialization failure
			 * @retval <SCE_OK Failure (Ngs2 library error code)
			 * @details This generates an AudioContext class. It is possible to specify the callback function used when the audio output is updated with the argument contextUpdate. To delete the generated instance, use sce::SampleUtil::destroy(). 
			 * @~Japanese
			 * @brief AudioContextの生成 
			 * @param outAudioContext 生成されたAudioContextが返るポインタ
			 * @param option AudioContextOptionへのポインタ（省略可）
			 * 
			 * @retval SCE_OK 成功
			 * @retval SCE_SAMPLE_UTIL_ERROR_INVALID_PARAM パラメータ不正
			 * @retval SCE_SAMPLE_UTIL_ERROR_FATAL 初期化失敗
			 * @retval <SCE_OK 失敗（Ngs2ライブラリのエラーコード）
			 * @details AudioContextクラスを生成します。引数contextUpdateによって、オーディオ出力更新時のコールバック関数を指定できます。生成されたインスタンスを削除する場合はsce::SampleUtil::destroy()を使用してください。 
			 */
			SCE_SAMPLE_UTIL_API int createAudioContext(AudioContext **outAudioContext, const AudioContextOption *option=NULL );



		}
	}
}


#endif /* _SCE_SAMPLE_UTIL_AUDIO_CONTEXT_H */
